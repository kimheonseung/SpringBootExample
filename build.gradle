plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'war'

    /**
     * for querydsl
     */
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'com.devheon.springboot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client'

    /**
     * for querydsl
     */
    implementation 'com.querydsl:querydsl-jpa'

    /* 썸네일 처리 라이브러리 - Thumbnailator (https://github.com/coobird/thumbnailator) */
    compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.12'

    compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-java8time'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
}

test {
    useJUnitPlatform()
}


/**
 * Querydsl을 이용하면 코드 내부에서 상황에 맞는 쿼리를 생성할 수 있다.
 * - 작성된 엔티티 클래스를 Q도메인 클래스로 변환하는 설정이 필요
 * - plugins 항목에 querydsl 부분 추가
 * - dependencies 항목에 필요 라이브러리 추가
 * - gradle에서 사용할 추가적 task 추가
 * -> compileQuerydsl task가 생기며 실행 시 Q클래스가 빌드된다.
 */

/**
 * for querydsl
 */
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}